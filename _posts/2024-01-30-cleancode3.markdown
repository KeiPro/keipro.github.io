---
layout: post
title: clean-code 3. 함수
date: 2024-01-30 21:40:00 +0900
category: CleanCode
---

# 3장. 함수

### [ 오늘 읽은 범위 : 3장, 함수 ]

## 책에서 기억하고 싶은 내용.

#### 함수를 만드는 규칙.

- 함수를 만드는 첫째 규칙은 '작게!'다.

  - 어떤 의도를 하고 있는 코드라면 길게 늘여 뜨릴 것이 아니라, 의도에 대한 의미를 담고 있는 함수로 따로 분리한다.

- 함수는 한 가지만을 해야 한다.

  - 함수가 한 가지만 하는지 판단하는 방법은 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러가지 작업을 하는 셈이다.

- 코드는 위에서 아래로 이야기처럼 읽혀야 좋다.

- 부수 효과를 일으키지 마라!

  - 함수에서 한 가지만 하겠다고 네이밍을 지어놓고 안에서는 다른 로직도 돌리게끔 하는 코드들이 종종 있다. 이 부분은 해로운 거짓말이다.

- 함수는 뭔가를 수행하거나 뭔가에 답하거나 둘 중 하나만 해야 한다. 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다.

- 오류 코드 대신 예외를 사용하면 오류 처리 코드가 원래 코드에서 분리되므로 코드가 깔끔해진다.

- 소프트웨어를 짜는 행위는 글짓기와 비슷하다.

## 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.

<br>
전체적으로 함수를 어떻게 하면 잘 만들 수 있는지에 대한 내용이 나왔다. 예제와 함께 비교해가며 잘못짠 함수를 보고 어떤 부분이 문제인지를 설명하는 내용들을 쭉 읽다보니 내가 범했었던 문제들 또한 잘 확인할 수 있었다. 특히, '부수 효과'를 일으키지 말라는 내용에서 '이런 상황에서는 그냥 이렇게 넣어도 되지 않나?' 싶었던 부분인데 함수를 분리시켜, 더 깔끔한 코드를 만들어내는 것을 보고 확실히 위에서 아래로 코드의 흐름이 읽힌다는 느낌을 받았던 것 같다. 앞으로 코드를 짤 때 이런 흐름들을 집중하며, 함수를 만드는 규칙들에 나온 내용들을 잘 적용 시켜가며 작업을 해봐야겠다.
<br>

<br>
#노개북 #노마드코더 #개발자북클럽
