---
layout: post
title: clean-code 8. 경계 9. 단위 테스트
date: 2024-02-08 23:18:00 +0900
category: CleanCode
---

### [ 오늘 읽은 범위 : 8~9장, 경계~단위 테스트. ]

## 책에서 기억하고 싶은 내용.

#### 외부 코드 사용시.

- 외부 코드를 사용하면 우리가 사용할 코드를 테스트해본다.

- 간단한 테스트 케이스를 작성해 외부 코드를 익혀본다. 이를 학습 테스트라 부른다.

- 학습 테스트는 드는 비용이 없다. 오히려 필요한 지식만 확보하는 손쉬운 방법이다.

#### TDD 법칙 세 가지.

1. 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.

2. 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.

3. 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.

#### 깨끗한 테스트 코드 유지하기.

- **_테스트 코드_**가 복잡할수록 실제 코드를 짜는 시간보다 **_테스트 케이스를 추가하는 시간_**이 더 걸리니 항상 깨끗하게 유지해야 한다.

- 테스트 코드는 실제 코드 못지않게 중요하다.

- 테스트 코드가 중요한 이유는 개발자는 자신이 수정한 코드가 제대로 도는지 확인할 방법이 없다. 이는 곧 결함율이 높아지기 시작하는 단계가 시작된다.

- 깨끗한 테스트 코드는 **_가독성_**이 중요하다.

#### 깨끗한 테스트의 다섯 가지 규칙.

1. Fast : 테스트는 빨라야 한다.
2. Independent : 각 테스트는 서로 의존하면 안 된다. 각 테스트는 독립적이고 어떤 순서로 실행해도 괜찮아야 한다.
3. Repeatable : 테스트는 어떤 환경에서도 반복 가능해야 한다.
4. Self-Validating : 테스트는 부울 값으로 결과를 내야 한다. 로그를 찍지 마라.
5. Timely : 테스트는 적시에 작성해야 한다. 단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현한다.

## 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.

<br>
단위 테스트에 대한 내용을 읽으면서, 예전에 프로젝트를 진행할 때 아무 생각 없이 큼직한 로직을 만들어내고 자잘한 것들은 '이렇게 저렇게 끼워넣으면 되겠지?' 라는 생각으로 진행했던 적이 있었는데, 나중에 여러가지 테스트를 해보니 계속해서 에러를 내뿜다보니 덕지덕지 예외처리를 붙이고 했던 적이 있었다. 항상 결과를 빨리 보고싶어 했었기 때문에, 세부적인 것은 뒤로하고 큼직한 것들을 빨리 보려고 생각과 손이 가는대로 짜다보니 발생했던 문제였다. 아직도 그런 기질이 사라지진 않은 것 같다. 하지만 오늘 단위 테스트의 글을 읽어보니, 결과를 빨리 보는 개념을 -> 단위 테스트의 결과를 빨리 보는 개념으로 정립을 하는 것이 어떨까? 싶은 생각이 들었다. 챌린지를 진행하거나 스터디를 진행 할 때, 이런 개념을 한 번 적용시켜보는 것도 좋을 것 같다.
<br>

## 나의 최애 북틸

https://dongpark.notion.site/9-23815f9364134cc9b40c52c6dc2328c0 : 정리가 너무 깔끔하시다.
https://nomadcoders.co/community/thread/9292 : 경험담과 함께 성장하시고 계시는 모습과 노력에 박수를 쳐드리고 싶다.
https://nomadcoders.co/community/thread/9295 : 페이지별로 정리를 잘 해주셨다.
