---
layout: post
title: clean-code 6. 객체와 자료 구조
date: 2024-02-04 21:11:00 +0900
category: CleanCode
---

# 6. 객체와 자료 구조

### [ 오늘 읽은 범위 : 6장, 객체와 자료 구조. ]

## 책에서 기억하고 싶은 내용.

#### 코드 형식을 맞추기 위한 간단한 규칙들.

- 조회 함수와 설정 함수로 변수를 다룬다고 클래스가 되지는 않는다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다.
  <br><br>
- 자료를 세세하게 공개하기보다는 추상적인 개념으로 표현하는 편이 좋다.
  <br><br>
- 복잡한 시스템을 짜다 보면 새로운 함수가 아니라 새로운 자료 타입이 필요한 경우가 생긴다. 이때는 클래스와 객체 지향 기법이 가장 적합한 반면, 새로운 자료 타입이 아니라 새로운 함수가 필요한 경우에는 절차적인 코드와 자료 구조가 좀 더 적합하다.
  <br><br>
- 디미터 법칙 : 모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙. 객체는 자료를 숨기고 함수를 공개한다. 즉, 객체는 조회 함수로 내부 구조를 공개하면 안된다는 의미이다.
  <br><br>
- 객체는 동작을 공개하고 자료를 숨긴다. 그래서 기존 동작을 변경하지 않으면서 새 객체 타입을 추가하기는 쉬운 반면, 기존 객체에 새 동작을 추가하기는 어렵다.

## 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.

<br>
예전에 프로그래밍을 할 때, 각 값마다 조회함수와 설정함수를 제공하여 쉽게 진행하려는 코드를 짰던적이 많았던 것 같다. 감추기 위해서 private으로 설정했지만 바깥에서 쉽게 쓰려고 public get, set 을 이용하여 코드를 짰던 경험이 있는데, 어떤 것을 하기위해서 get, set을 이용하려 하는지를 조금 더 생각해보고 외부로 노출시키지 않고 최대한 해당 클래스 내에서 표현 되도록 하는 방법이 더 올바른 구조가 되지 않을까 싶다. 또한, 객체가 무엇이 들었는지를 꺼내보는 방식보다는(객체는 무엇을 하기 위해서 존재하는 개념이기 때문에) 동작을 시키는 방식으로 처리를 하도록 하자.
<br>

<br>
#노개북 #노마드코더 #개발자북클럽
