---
layout: post
title: clean-code 7. 오류 처리
date: 2024-02-06 20:18:00 +0900
category: CleanCode
---

# 7. 오류 처리.

### [ 오늘 읽은 범위 : 7장, 오류 처리. ]

## 책에서 기억하고 싶은 내용.

#### try-catch-finally 문부터 작성하라

- 예외가 발생할 코드를 짤 때에는 try-catch-finally 문으로 시작하는 편이 낫다.

- 강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 권장한다.

#### 예외에 의미를 제공하라

- 예외를 던질 때는 전후 상황을 충분히 덧붙인다. 또한, 오류 메시지에 정보를 담아 예외와 함께 던진다.

- 실패한 연산 이름과 실패 유형도 언급한다.

#### 호출자를 고려해 예외 클래스를 정의하라

- 외부 API를 사용할 감싸는 기법을 사용해라. 외부 API를 감싸면 외부라이브러리와 프로그램 사이에서 의존성이 크게 줄어든다.

#### null을 반환하지 마라

- 메서드에서 null을 반환하고픈 유혹이 든다면 그 대신 예외를 던지거나 특수 사례 객체(예를 들어, 빈 리스트)를 반환한다.

#### null을 전달하지 마라

- 호출자가 실수로 넘기는 null을 적절히 처리하는 방법이 없다. 애초에 null을 넘기지 못하도록 금지하는 정책이 합리적이다.

- 결론으로, 깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다.

## 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.

<br>
오늘은 오류 처리에 대한 방법에 대해서 글을 읽어보았다. 원래 null에 대해서 반환도 자주하고, 예외처리도 자주 하던 나로서는 생각해보지 못했던 부분인 것 같다. null을 반환하는 것 자체에 대해서 좋지 않다는 내용이 있는데 그 이유는 null을 반환함으로써 예외처리를 바깥에서 해줘야 하니, null을 반환하고 싶다면 차라리 예외를 던지거나 null이 나오지 않는 특수 사례 객체를 사용하라고 한다. null을 반환시키는 것이 아니라 그 상황에 맞게 다른 객체를 반환해보려 생각해보는 것은 앞으로 null을 반환하려는 코드를 작성하려고 할 때, 한 번 생각해봐야겠다.
<br>

<br>

## 새로운 지식을 내 것으로 만드는 나만의 공부법을 소개

- 새로운 지식에 대해, 이해한 부분에 대해서 나만의 언어로 정리하는 것이 좋은 것 같습니다. 동영상 강의를 시청할 때는, 한 스텝이 끝날때마다(한 파트가 아닌 짧은 하나의 스텝) 일시정지를 하여 어느정도까지 이해가 되었는지를 꼭 확인하는 시간을 가지며, 이해가 되지 않았을 경우 이해가 되지 않았다는 내용을 꼭 첨부한 후에 넘어가도록 합니다. 다음에 다시 복습하는 시간에 해당 내용에 대해서 인터넷을 찾아보거나 chatgpt를 이용하여 추가적으로 개념에 대해서 알아보는 시간을 가집니다.

#노개북 #노마드코더 #개발자북클럽
