---
layout: post
title: clean-code 10. 클래스
date: 2024-02-12 22:13:00 +0900
category: CleanCode
---

### [ 오늘 읽은 범위 : 10장. 클래스 ]

## 책에서 기억하고 싶은 내용.

#### 클래스는 작아야 한다.

- 작명은 클래스 크기를 줄이는 첫 번째 관문이다.

- 클래스 이름이 모호하다면 필경 클래스 책임이 너무 많아서다. 예를 들어, 클래스 이름에 Processor, Manager, Super 등과 같이 모호한 단어가 있다면 클래스에다 여러 책임을 떠안았다는 증거다.

#### 단일 책임 원칙

- 단일 책임 원칙(SRP)은 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙이다.

- 변경할 이유를 파악하려 애쓰다 보면 코드를 추상화하기도 쉬워진다.

#### 응집도(Cohesion)

- 클래스는 인스턴스 변수 수가 작아야 한다.

- '함수를 작게, 매개변수 목록을 짧게'라는 전략을 따르다 보면 때떄로 몇몇 메소드만이 사용하는 인스턴스 변수가 아주 많아진다. 이는, 새로운 클래스로 쪼개야 한다는 신호다.

- 응집도가 높아지도록 변수와 메소드를 적절히 분리해 새로운 클래스 두세 개로 쪼개준다.

- 클래스가 응집력을 잃는다면 쪼개야 한다.

#### 클래스 쪼개기

- 리팩토링을 했는데 코드가 늘어난 이유는,

  1. 좀 더 길고 서술적인 변수 이름을 사용하였다.
  2. 코드에 주석을 추가하는 수단으로 함수 선언과 클래스 선언을 활용한다.
  3. 가독성을 높이고자 공백을 추가하고 형식을 맞추었다.

#### 변경으로부터 격리

- 상세한 구현에 의존하는 클라이언트 클래스는 구현이 바뀌면 위험에 빠진다. 그래서 우리는 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.

- 시스템의 결합도를 낮추면 유연성과 재사용성도 더욱 높아진다.

## 오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요.

<br>
클래스가 어떤 식으로 구성되어 있어야 하는지에 대해서 정리가 조금 되는 챕터였던 것 같다. 하나의 클래스에서 많은 것을 다 다루려고 하는, Manager라는 네이밍을 사용하여 진행했던 적이 있다. 그만큼 하나의 클래스에 의존적이 되며, 분리가 되어 있지 않다보니 고치기가 많이 어려웠던 경험이 있다. 이번 챕터도 역시 예전에 읽었던, 깨끗한 코드를 짜는 방법에 크게 지나지 않는 내용인 것 같다. 클래스가 어떤 일을 할 것이며, 그 일을 하는 것이 그 클래스가 맞는 지에 대한 검증을 통해 쪼갤 수 있으면 쪼개는 방식으로 클래스를 추가하고, 변경이 필요한 부분이 있다면 그 부분에 초점을 맞추어서 코드를 추상화하는 노력을 들여봐야 될 것 같다.
<br>
<br>
#노개북#노마드코더#개발자북클럽
